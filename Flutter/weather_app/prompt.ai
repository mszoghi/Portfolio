Project Title: Stunning Weather App

Objective: Develop a visually appealing and user-friendly weather application that provides real-time weather updates, forecasts, and weather-related news to users based on their location.

Development Environment:
IDE: Visual Studio Code
Platform: Flutter for cross-platform functionality
Testing: Emulators for both iOS and Android, leveraging the Flutter DevTools

Features:
Location-Based Weather: Automatically detect the user’s location to display current weather conditions or allow users to manually search for a city.
Real-Time Weather Updates: Show current weather conditions including temperature, humidity, wind speed, and a brief description (e.g., sunny, rainy).
Forecast: Provide a 7-day weather forecast that includes daily highs and lows, and weather conditions.
Weather Maps: Integrate a weather map that shows precipitation, temperature, and cloud cover using a mapping API.
Notifications: Option for users to receive notifications for weather alerts like severe weather updates or daily forecasts.
Customizable Interface: Allow users to choose between a light or dark theme for the app.
Weather News: Include a section for the latest weather news and articles.
Settings: Users can set preferences for units of measurement (Celsius or Fahrenheit), location (manual or automatic), and theme.
Design:
Use Flutter widgets like Container, Text, and ListView for layout and structure.
Implement custom animations for weather changes using Flutter’s animation library.
Integrate material design principles for a cohesive look and feel that’s responsive across iOS and Android devices.
API Integration:
Utilize a weather API (open-meteo API) to fetch real-time data.
Ensure data handling is efficient with proper error handling to manage API limitations or connectivity issues.
The API documentaion located at https://open-meteo.com/en/docs
Testing:
Conduct unit tests to ensure functions fetch and display data correctly.
Perform integration tests to check the app’s performance with real API data.
Use widget testing to verify that the UI displays as expected across different devices and orientations.
Deployment:
Prepare the app for deployment on both the Apple App Store and Google Play Store.
Ensure the app meets all platform-specific guidelines and requirements.
Stretch Goals:
Add an interactive radar map.
Implement a feature to track and display historical weather data for comparison.

